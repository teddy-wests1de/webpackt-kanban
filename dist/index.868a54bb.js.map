{"mappings":"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","sources":["<anon>","index.js","kanban.js"],"sourcesContent":["class $70c0ede04bd87cca$export$2e2bcd8739ae039 {\n    static getTasks(columnId) {\n        const data = $70c0ede04bd87cca$var$read().find((column)=>{\n            return column.columnId === columnId;\n        });\n        if (!data) return [];\n        return data.tasks;\n    }\n    static insertTask(columnId, content) {\n        const data = $70c0ede04bd87cca$var$read();\n        const column = data.find((column)=>{\n            return column.columnId == columnId;\n        });\n        const task = {\n            taskId: Math.floor(Math.random() * 100000),\n            content: content\n        };\n        column.tasks.push(task);\n        $70c0ede04bd87cca$var$save(data);\n        // console.log(data);\n        return task;\n    }\n    static updateTask(taskId, updatedInformation) {\n        const data = $70c0ede04bd87cca$var$read();\n        function findColumnTask() {\n            for (const column of data){\n                const task = column.tasks.find((task)=>task.taskId == taskId);\n                // console.log(task);\n                if (task) return [\n                    task,\n                    column\n                ];\n            }\n        }\n        const [task, currentColumn] = findColumnTask();\n        console.log(task);\n        const targetColumn = data.find((column)=>{\n            return column.columnId == updatedInformation.columnId;\n        });\n        task.content = updatedInformation.content;\n        currentColumn.tasks.splice(currentColumn.tasks.indexOf(task));\n        targetColumn.tasks.push(task);\n        $70c0ede04bd87cca$var$save(data);\n    }\n    static deleteTask(taskId) {\n        const data = $70c0ede04bd87cca$var$read();\n        data.map((column)=>{\n            const task = column.tasks.find((task)=>task.taskId == taskId);\n            console.log(task);\n            if (task) column.tasks.splice(column.tasks.indexOf(task), 1);\n        });\n        $70c0ede04bd87cca$var$save(data);\n        return data;\n    }\n    static getAllTasks() {\n        const data = $70c0ede04bd87cca$var$read();\n        $70c0ede04bd87cca$var$columnCount();\n        return [\n            data[0].tasks,\n            data[1].tasks,\n            data[2].tasks\n        ];\n    }\n}\nfunction $70c0ede04bd87cca$var$read() {\n    const data = localStorage.getItem(\"data\");\n    if (!data) return [\n        {\n            columnId: 0,\n            tasks: []\n        },\n        {\n            columnId: 1,\n            tasks: []\n        },\n        {\n            columnId: 2,\n            tasks: []\n        }\n    ];\n    return JSON.parse(data);\n}\nfunction $70c0ede04bd87cca$var$save(data) {\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    $70c0ede04bd87cca$var$columnCount();\n}\nconst $70c0ede04bd87cca$var$columnCount = function() {\n    const data = $70c0ede04bd87cca$var$read();\n    const todo = document.querySelector(\"span.todo\");\n    todo.textContent = data[0].tasks.length;\n    const pending = document.querySelector(\"span.pending\");\n    pending.textContent = data[1].tasks.length;\n    const completed = document.querySelector(\"span.completed\");\n    completed.textContent = data[2].tasks.length;\n}; // console.log(Kanban.getAllTasks());\n // console.log(Kanban.getTasks(0));\n // const data = Kanban.getAllTasks();\n // Kanban.insertTask(0, \"Record Kanban Lectures\");\n // console.log(Kanban.deleteTask(68632));\n // Kanban.deleteTask();\n // console.log(Kanban.getAllTasks());\n // Kanban.updateTask(50583, {\n //   columnId: 2,\n //   content: \"Record Javascript...!\",\n // });\n // console.log(Kanban.getAllTasks());\n\n\nconst $dad545c909cfec2d$var$todo = document.querySelector(\".cards.todo\");\nconst $dad545c909cfec2d$var$pending = document.querySelector(\".cards.pending\");\nconst $dad545c909cfec2d$var$completed = document.querySelector(\".cards.completed\");\nconst $dad545c909cfec2d$var$taskBox = [\n    $dad545c909cfec2d$var$todo,\n    $dad545c909cfec2d$var$pending,\n    $dad545c909cfec2d$var$completed\n];\nconst $dad545c909cfec2d$var$addTaskCard = function(task, index) {\n    const element = document.createElement(\"form\");\n    element.className = \"card\";\n    element.draggable = true;\n    element.dataset.id = task.taskId;\n    element.innerHTML = `\n    <input\n      value=\"${task.content}\"\n      type=\"text\"\n      name=\"task\"\n      autocomplete=\"off\"\n      disabled=\"disabled\"\n    />\n    <div>\n      <span class=\"task-id\">#${task.taskId}</span>\n      <span>\n        <button class=\"bi bi-pencil edit\" data-id=\"${task.taskId}\" data-column=\"${index}\"></button>\n        <button\n          class=\"bi bi-check-lg update hide\"\n          data-id=\"${task.taskId}\" data-column=\"${index}\"\n        ></button>\n        <button class=\"bi bi-trash3 delete\" data-id=\"${task.taskId}\"></button>\n      </span>\n    </div>\n    `;\n    $dad545c909cfec2d$var$taskBox[index].appendChild(element);\n    return index;\n};\n// addTaskCard();\n(0, $70c0ede04bd87cca$export$2e2bcd8739ae039).getAllTasks().forEach((tasks, index)=>{\n    tasks.forEach((task)=>{\n        $dad545c909cfec2d$var$addTaskCard(task, index);\n    });\n});\nconsole.log((0, $70c0ede04bd87cca$export$2e2bcd8739ae039).getAllTasks());\nconst $dad545c909cfec2d$var$addForm = document.querySelectorAll(\".add\");\n$dad545c909cfec2d$var$addForm.forEach((form)=>{\n    form.addEventListener(\"submit\", (event)=>{\n        event.preventDefault();\n        const task = (0, $70c0ede04bd87cca$export$2e2bcd8739ae039).insertTask(form.submit.dataset.id, form.task.value.trim());\n        $dad545c909cfec2d$var$addTaskCard(task, form.submit.dataset.id);\n        form.reset();\n    });\n});\n$dad545c909cfec2d$var$taskBox.forEach((column)=>{\n    column.addEventListener(\"click\", (event)=>{\n        event.preventDefault();\n        const formInput = event.target.parentElement.parentElement.previousElementSibling;\n        if (event.target.classList.contains(\"edit\")) {\n            formInput.removeAttribute(\"disabled\");\n            event.target.classList.add(\"hide\");\n            event.target.nextElementSibling.classList.remove(\"hide\");\n        }\n        if (event.target.classList.contains(\"update\")) {\n            formInput.setAttribute(\"disabled\", \"disabled\");\n            event.target.classList.add(\"hide\");\n            event.target.previousElementSibling.classList.remove(\"hide\");\n            const taskId = event.target.dataset.id;\n            const columnId = event.target.dataset.column;\n            const content = formInput.value;\n            console.log(taskId, columnId, content);\n            (0, $70c0ede04bd87cca$export$2e2bcd8739ae039).updateTask(taskId, {\n                columnId: columnId,\n                content: content\n            });\n        }\n        if (event.target.classList.contains(\"delete\")) {\n            event.preventDefault();\n            formInput.parentElement.remove();\n            (0, $70c0ede04bd87cca$export$2e2bcd8739ae039).deleteTask(event.target.dataset.id);\n        }\n    });\n    column.addEventListener(\"dragstart\", (event)=>{\n        if (event.target.classList.contains(\"card\")) event.target.classList.add(\"dragging\");\n    });\n    column.addEventListener(\"dragover\", (event)=>{\n        const card = document.querySelector(\".dragging\");\n        column.appendChild(card);\n    });\n    column.addEventListener(\"dragend\", (event)=>{\n        if (event.target.classList.contains(\"card\")) {\n            event.target.classList.remove(\"dragging\");\n            const taskId = event.target.dataset.id;\n            const columnId = event.target.parentElement.dataset.id;\n            const content = event.target.task.value;\n            (0, $70c0ede04bd87cca$export$2e2bcd8739ae039).updateTask(taskId, {\n                columnId: columnId,\n                content: content\n            });\n        }\n    });\n});\n\n\n//# sourceMappingURL=index.868a54bb.js.map\n","import Kanban from \"./kanban.js\";\n\nconst todo = document.querySelector(\".cards.todo\");\nconst pending = document.querySelector(\".cards.pending\");\nconst completed = document.querySelector(\".cards.completed\");\n\nconst taskBox = [todo, pending, completed];\n\nconst addTaskCard = function (task, index) {\n  const element = document.createElement(\"form\");\n  element.className = \"card\";\n  element.draggable = true;\n  element.dataset.id = task.taskId;\n  element.innerHTML = `\n    <input\n      value=\"${task.content}\"\n      type=\"text\"\n      name=\"task\"\n      autocomplete=\"off\"\n      disabled=\"disabled\"\n    />\n    <div>\n      <span class=\"task-id\">#${task.taskId}</span>\n      <span>\n        <button class=\"bi bi-pencil edit\" data-id=\"${task.taskId}\" data-column=\"${index}\"></button>\n        <button\n          class=\"bi bi-check-lg update hide\"\n          data-id=\"${task.taskId}\" data-column=\"${index}\"\n        ></button>\n        <button class=\"bi bi-trash3 delete\" data-id=\"${task.taskId}\"></button>\n      </span>\n    </div>\n    `;\n  taskBox[index].appendChild(element);\n  return index;\n};\n\n// addTaskCard();\nKanban.getAllTasks().forEach((tasks, index) => {\n  tasks.forEach((task) => {\n    addTaskCard(task, index);\n  });\n});\n\nconsole.log(Kanban.getAllTasks());\n\nconst addForm = document.querySelectorAll(\".add\");\n\naddForm.forEach((form) => {\n  form.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n    const task = Kanban.insertTask(\n      form.submit.dataset.id,\n      form.task.value.trim()\n    );\n    addTaskCard(task, form.submit.dataset.id);\n    form.reset();\n  });\n});\n\ntaskBox.forEach((column) => {\n  column.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    const formInput =\n      event.target.parentElement.parentElement.previousElementSibling;\n    if (event.target.classList.contains(\"edit\")) {\n      formInput.removeAttribute(\"disabled\");\n      event.target.classList.add(\"hide\");\n      event.target.nextElementSibling.classList.remove(\"hide\");\n    }\n    if (event.target.classList.contains(\"update\")) {\n      formInput.setAttribute(\"disabled\", \"disabled\");\n      event.target.classList.add(\"hide\");\n      event.target.previousElementSibling.classList.remove(\"hide\");\n      const taskId = event.target.dataset.id;\n      const columnId = event.target.dataset.column;\n      const content = formInput.value;\n      console.log(taskId, columnId, content);\n\n      Kanban.updateTask(taskId, {\n        columnId: columnId,\n        content: content,\n      });\n    }\n    if (event.target.classList.contains(\"delete\")) {\n      event.preventDefault();\n      formInput.parentElement.remove();\n      Kanban.deleteTask(event.target.dataset.id);\n    }\n  });\n\n  column.addEventListener(\"dragstart\", (event) => {\n    if (event.target.classList.contains(\"card\")) {\n      event.target.classList.add(\"dragging\");\n    }\n  });\n  column.addEventListener(\"dragover\", (event) => {\n    const card = document.querySelector(\".dragging\");\n    column.appendChild(card);\n  });\n  column.addEventListener(\"dragend\", (event) => {\n    if (event.target.classList.contains(\"card\")) {\n      event.target.classList.remove(\"dragging\");\n      const taskId = event.target.dataset.id;\n      const columnId = event.target.parentElement.dataset.id;\n      const content = event.target.task.value;\n      Kanban.updateTask(taskId, {\n        columnId,\n        content,\n      });\n    }\n  });\n});\n","export default class Kanban {\n  static getTasks(columnId) {\n    const data = read().find((column) => {\n      return column.columnId === columnId;\n    });\n\n    if (!data) {\n      return [];\n    }\n    return data.tasks;\n  }\n\n  static insertTask(columnId, content) {\n    const data = read();\n    const column = data.find((column) => {\n      return column.columnId == columnId;\n    });\n\n    const task = {\n      taskId: Math.floor(Math.random() * 100000),\n      content: content,\n    };\n    column.tasks.push(task);\n    save(data);\n    // console.log(data);\n    return task;\n  }\n\n  static updateTask(taskId, updatedInformation) {\n    const data = read();\n\n    function findColumnTask() {\n      for (const column of data) {\n        const task = column.tasks.find((task) => task.taskId == taskId);\n        // console.log(task);\n        if (task) {\n          return [task, column];\n        }\n      }\n    }\n    const [task, currentColumn] = findColumnTask();\n    console.log(task);\n\n    const targetColumn = data.find((column) => {\n      return column.columnId == updatedInformation.columnId;\n    });\n\n    task.content = updatedInformation.content;\n    currentColumn.tasks.splice(currentColumn.tasks.indexOf(task));\n    targetColumn.tasks.push(task);\n\n    save(data);\n  }\n\n  static deleteTask(taskId) {\n    const data = read();\n    data.map((column) => {\n      const task = column.tasks.find((task) => task.taskId == taskId);\n      console.log(task);\n      if (task) column.tasks.splice(column.tasks.indexOf(task), 1);\n    });\n    save(data);\n    return data;\n  }\n\n  static getAllTasks() {\n    const data = read();\n    columnCount();\n    return [data[0].tasks, data[1].tasks, data[2].tasks];\n  }\n}\n\nfunction read() {\n  const data = localStorage.getItem(\"data\");\n\n  if (!data) {\n    return [\n      { columnId: 0, tasks: [] },\n      { columnId: 1, tasks: [] },\n      { columnId: 2, tasks: [] },\n    ];\n  }\n  return JSON.parse(data);\n}\n\nfunction save(data) {\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  columnCount();\n}\n\nconst columnCount = function () {\n  const data = read();\n\n  const todo = document.querySelector(\"span.todo\");\n  todo.textContent = data[0].tasks.length;\n\n  const pending = document.querySelector(\"span.pending\");\n  pending.textContent = data[1].tasks.length;\n\n  const completed = document.querySelector(\"span.completed\");\n  completed.textContent = data[2].tasks.length;\n};\n\n// console.log(Kanban.getAllTasks());\n// console.log(Kanban.getTasks(0));\n// const data = Kanban.getAllTasks();\n\n// Kanban.insertTask(0, \"Record Kanban Lectures\");\n// console.log(Kanban.deleteTask(68632));\n// Kanban.deleteTask();\n\n// console.log(Kanban.getAllTasks());\n// Kanban.updateTask(50583, {\n//   columnId: 2,\n//   content: \"Record Javascript...!\",\n// });\n// console.log(Kanban.getAllTasks());\n"],"names":["$70c0ede04bd87cca$export$2e2bcd8739ae039","getTasks","columnId","data","$70c0ede04bd87cca$var$read","find","column","tasks","insertTask","content","task","taskId","Math","floor","random","push","$70c0ede04bd87cca$var$save","updateTask","updatedInformation","currentColumn","findColumnTask","console","log","targetColumn","splice","indexOf","deleteTask","map","getAllTasks","$70c0ede04bd87cca$var$columnCount","localStorage","getItem","JSON","parse","setItem","stringify","todo","document","querySelector","textContent","length","pending","completed","$dad545c909cfec2d$var$taskBox","$dad545c909cfec2d$var$addTaskCard","index","element","createElement","className","draggable","dataset","id","innerHTML","appendChild","forEach","$dad545c909cfec2d$var$addForm","querySelectorAll","form","addEventListener","event","preventDefault","submit","value","trim","reset","formInput","target","parentElement","previousElementSibling","classList","contains","removeAttribute","add","nextElementSibling","remove","setAttribute","card"],"version":3,"file":"index.868a54bb.js.map"}